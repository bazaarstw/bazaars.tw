/**
* RWS Systems 0.1.0 Copyright (c) 2013-2013, King-lin All Rights Reserved.
* Modules: Jquery plugin
* Creation time: 2013/03/20
* Modification time: 2013/03/20
*
* @author Richard WU.
* @copyright 2013 Richard WU. taipeiwu@yahoo.com.tw
*
*/
(function(){
"use strict";
	var defaultOptions = {
		_RWS_form: null,
		_RWS_arrdata: null
	}
	
	var Result = {
		_RWS_status: 0,
		_RWS_results: null
	}
	
	// (定義)系統參數
	var SystemVar = {
		// (定義)undefined
		undefined: 'undefined'
	}
	
	/*
	 * Feature detection
	 */
	var feature = {};
	feature.fileapi = $("<input type='file'/>").get(0).files !== undefined;
	feature.formdata = window.FormData !== undefined;
	
	// Status { 0: Not yet; 1: Success; 2: Failure; 3: Error; 4: Format error, 10: Do not have function! }
	function RWS_get(dtd) {
		// 新建一個Deferred對象
		var dtd = $.Deferred();
		
		$.ajax({
			type:  "POST",
			//url:  "http://localhost/iem/rws.php",
			url:  "http://" + window.location.hostname.toString() + "/iem/ws/rws.php",
			data:  defaultOptions._RWS_arrdata,
			//contentType: "multipart/form-data",
			//contentType: "application/json; charset=utf-8",
			dataType: "json",
			cache: false,
			async: false,
			beforeSend: function (xhr, settings) {
				//settings.data =	settings.data.replace(/%5D%5B(.+?)%5D=/g, "%5D.$1=");
			},
			//complete: 	$.fn.RWS.unmask("body"),	// if open then async: true
			success: function (data) {
				log('RWS_get: success!');
				RWS_success(data);
				
				// 改變Deferred對象的執行狀態
				dtd.resolve();
			},
			// ajax 執行失敗
			failure: function (msg) {
				log('(error)RWS_get: failure!');
				RWS_failure(msg);
				
				// 改變Deferred對象的執行狀態
				dtd.resolve();
			},
			// ajax 執行發生錯誤
			error: function (err) {
				log('(error)RWS_get: error!');
				RWS_error(err);
				
				// 改變Deferred對象的執行狀態
				dtd.resolve();
			}
		});
		
		// 返回promise对象
		return dtd.promise();
	}
	
	function RWS_success(data) {
		if (typeof(data.JINFO) == SystemVar.undefined || typeof(data.JOPTS) == SystemVar.undefined || typeof(data.JDATA) == SystemVar.undefined) {
			Result._RWS_status = 4;
		} else {
			if (data.JINFO == 'FALSE' && data.JOPTS == 'FALSE' && data.JDATA == 'Do not have function!') {
				Result._RWS_status = 10;
			} else if (data.JINFO == 'FALSE' && data.JOPTS == 'FALSE' && data.JDATA == 'Version error...') {
				Result._RWS_status = 11;
			} else {
				Result._RWS_status = 1;
			}
		}
		Result._RWS_results = data;
		
		if (Result._RWS_status == 1) {
			log('RWS_success: status is ' + Result._RWS_status);
			log('RWS_success: result is ' + Result._RWS_results);
		} else {
			log('(warning)RWS_success: status is ' + Result._RWS_status);
			log('(warning)RWS_success: result is ' + Result._RWS_results);
		}
	}
	
	function RWS_failure(msg) {
		Result._RWS_status = 2;
		Result._RWS_results = msg;
		
		log('(error)RWS_failure: status is ' + Result._RWS_status);
		log('(error)RWS_failure: result is ' + Result._RWS_results);
	}
	
	function RWS_error(err) {
		Result._RWS_status = 3;
		Result._RWS_results = err;
		
		log('(error)RWS_error: status is ' + Result._RWS_status);
		log('(error)RWS_error: result is ' + Result._RWS_results);
	}
	
	// 表單各欄位array自動化
	function RWS_formFormat(semantic) {
		// (定義)暫存各欄位array
		var tmpformFormat = [];
		
		// 若目標搜尋不到表單，中斷array自動化
		if (defaultOptions._RWS_form.length === 0) {
			log('(error)RWS_formFormat: cannot search form, length is ' + defaultOptions._RWS_form.length);
			return tmpformFormat;
		}
		
		// (定義)暫存用的checkbox
		var tmpformCheck = [];
		
		// (定義)目標form
		var form = defaultOptions._RWS_form[0];
		
		// (定義)目標form內的所有tag
		var els = semantic ? form.getElementsByTagName('*') : form.elements;
		
		// 若目標form搜尋不到任何tag，中斷array自動化
		if (!els) {
			log('(error)RWS_formFormat: cannot search elements');
			return tmpformFormat;
		}
		
		// (定義)迴圈變數i, j；迴圈最大遞迴變數imax, jmax
		var i, j, imax, jmax;
		
		for(i=0, imax = els.length; i < imax; i++) {
			// (定義)目標form內的單一tag
			var el = els[i];
			// (定義)單一tag的類型
			var elt = el.type;
			// (定義)單一tag的名稱
			var eln = el.name;
			// (定義)單一tag是否為必填
			var elr = el.required;
			// (定義)單一tag的值
			var elv;
			
			// (定義)
			var tmpReCheck = 0;
			
			log('RWS_formFormat: element index ' + i + ', the element type is ' + elt);
			
			// 如果單一tag的名稱找不到，就跳過該次迴圈
			if (! eln) {
				log('(error)RWS_formFormat: element index ' + i + ', cannot search element name');
				continue;
			}
			
			/*
			if (semantic && form.clk && el.type == "image") {
				// handle image inputs on the fly when semantic == true
				if(!el.disabled && form.clk == el) {
					tmpformFormat.push({name: eln, value: $(el).val(), type: el.type });
					tmpformFormat.push({name: eln+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
				}
				continue;
			}
			*/
			
			// 如果單一tag的類型為checkbox
			if (elt == 'checkbox') {
				if (typeof(tmpformCheck) == SystemVar.undefined) {
					log('(error)RWS_formFormat: element index ' + i + ', tmpformCheck is ' + SystemVar.undefined);
				} else {
					// 搜尋暫存用的checkbox是否有相同的name
					for(j = 0, jmax = tmpformCheck.length; j < jmax; j++) {
						if (tmpformCheck[j].name == eln) {
							tmpReCheck = 1;
							log('RWS_formFormat: element index ' + i + ', ' + elt + ' index ' + j + ', ' + elt + ' name is ' + tmpformCheck[j].name);
						}
					}
				}
				
				if (tmpReCheck == 0) {
					// 將此單一tag儲存到暫存用的checkbox
					tmpformCheck.push({name: eln, type: elt, required: elr});
					
					log('RWS_formFormat: element index ' + i + ', Success!');
				}
				continue;
			}
			
			// 讀取單一tag的值
			elv = RWS_fieldValue(el, true);
			
			// 如果單一tag的值是陣列
			if (elv && elv.constructor == Array) {
				for(j = 0, jmax = elv.length; j < jmax; j++) {
					tmpformFormat.push({name: eln, value: elv[j]});
					
					log('RWS_formFormat: element index ' + i + ', the element name is ' + eln);
					log('RWS_formFormat: element index ' + i + ', the element value is ' + elv[j]);
					log('RWS_formFormat: element index ' + i + ', value index ' + j + ', Success!');
				}
			/*
			} else if (feature.fileapi && t == 'file' && !el.disabled) {
				var files = el.files;
				if (files.length) {
					for (j=0; j < files.length; j++) {
						tmpformFormat.push({name: eln, value: files[j], type: elt});
					}
				}
				else {
					tmpformFormat.push({ name: eln, value: '', type: elt});
				}
			*/
			
			// 如果單一tag的值不是空值
			} else if (elv !== null && typeof elv != SystemVar.undefined) {
				tmpformFormat.push({name: eln, value: elv, type: elt, required: elr});
				
				log('RWS_formFormat: element index ' + i + ', the element name is ' + eln);
				log('RWS_formFormat: element index ' + i + ', the element value is ' + elv);
				log('RWS_formFormat: element index ' + i + ', the element required is ' + elr);
				log('RWS_formFormat: element index ' + i + ', Success!');
			} else {
				log('(error)RWS_formFormat: element index ' + i + ', cannot read element value');
				continue;
			}
		}
		
		/*
		if (!semantic && form.clk) {
			// input type=='image' are not found in elements array! handle it here
			var $input = $(form.clk), input = $input[0];
			n = input.name;
			if (n && !input.disabled && input.type == 'image') {
				tmpformFormat.push({name: n, value: $input.val()});
				tmpformFormat.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
			}
		}
		*/
		
		// 處理tag的類型為checkbox，並且儲存於暫存用的checkbox
		if (tmpformCheck != SystemVar.undefined) {
			log('RWS_formFormat: having tmpformCheck!');
			for(j = 0, jmax = tmpformCheck.length; j < jmax; j++) {
				// (定義)目標form內的單一tag
				var el = tmpformCheck[j];
				// (定義)單一tag的類型
				var elt = el.type;
				// (定義)單一tag的名稱
				var eln = el.name;
				// (定義)單一tag是否為必填
				var elr = el.required;
				// (定義)單一tag的值
				var elv;
				
				// (定義)
				var tmparrelv = [];
				
				$('#' + form.id + ' input:checkbox:checked[name="' + eln + '"]').each(function(i) {
					tmparrelv.push(this.value);
				});
				
				elv = $.map(tmparrelv, function(val,index) {
					 return val;
				}).join(",");
				
				if (elv) {
					tmpformFormat.push({name: eln, value: elv, type: elt, required: elr});
					
					log('RWS_formFormat: checkbox index ' + j + ', the checkbox name is ' + eln);
					log('RWS_formFormat: checkbox index ' + j + ', the checkbox value is ' + elv);
					log('RWS_formFormat: checkbox index ' + j + ', the checkbox required is ' + elr);
					log('RWS_formFormat: checkbox index ' + j + ', Success!');
				}
			}
		}
		
		/*var strformFormat = $.map(tmpformFormat, function(val1,index1) {
			console.log(val1);
			var str1 = $.map(val1, function(val2,index2) {
				console.log(val2);
				//var str2 = index2 + "`::`" + val2;
				return val2;
			});
			console.log(val1);
			return str1;
		}).join('`,`');*/
		
		log('RWS_formFormat: Complete!');
		
		return tmpformFormat;
	}
	
	/**
	 * Returns the value of the field element.
	 */
	function RWS_fieldValue(el, successful){
		var n = el.name, t = el.type, tag = el.tagName.toLowerCase();
		// SystemVar.undefined
		if (successful === undefined) {
			successful = true;
		}
		
		if (successful && (!n || el.disabled || t == 'reset' || t == 'button' ||
			(t == 'checkbox' || t == 'radio') && !el.checked ||
			(t == 'submit' || t == 'image') && el.form && el.form.clk != el ||
			tag == 'select' && el.selectedIndex == -1)) {
				return null;
		}
		
		if (tag == 'select') {
			var index = el.selectedIndex;
			if (index < 0) {
				return null;
			}
			var a = [], ops = el.options;
			var one = (t == 'select-one');
			var max = (one ? index+1 : ops.length);
			for(var i=(one ? index : 0); i < max; i++) {
				var op = ops[i];
				if (op.selected) {
					var v = op.value;
					if (!v) { // extra pain for IE...
						v = (op.attributes && op.attributes['value'] && !(op.attributes['value'].specified)) ? op.text : op.value;
					}
					if (one) {
						return v;
					}
					a.push(v);
				}
			}
			return a;
		}
		
		return $(el).val();
	};
	
	// helper fn for console logging
	function log() {
		if (!$.fn.RWS_log){
			return;
		}
		var msg = '[RWS] ' + Array.prototype.join.call(arguments, '');
		if (window.console && window.console.log){
			window.console.log(msg);
		}else if (window.opera && window.opera.postError){
			window.opera.postError(msg);
		}
	}
	
	/*
	$.extend({
		maskElement: function(element, label){
			//if this element has delayed mask scheduled then remove it and display the new one
			if (element.data("_mask_timeout") !== undefined) {
					clearTimeout(element.data("_mask_timeout"));
					element.removeData("_mask_timeout");
			}

			if(element.RWS.isMasked(element)) {
					$.unmaskElement(element);
			}
			
			if(element.css("position") == "static") {
					element.addClass("masked-relative");
			}
			
			element.addClass("masked");
			
			var maskDiv = $('<div class="loadmask"></div>');
			
			//auto height fix for IE
			if(navigator.userAgent.toLowerCase().indexOf("msie") > -1){
					maskDiv.height(element.height() + parseInt(element.css("padding-top")) + parseInt(element.css("padding-bottom")));
					maskDiv.width(element.width() + parseInt(element.css("padding-left")) + parseInt(element.css("padding-right")));
			}
			
			//fix for z-index bug with selects in IE6
			if(navigator.userAgent.toLowerCase().indexOf("msie 6") > -1){
					element.find("select").addClass("masked-hidden");
			}
			
			element.append(maskDiv);
			
			if(label !== undefined) {
					var maskMsgDiv = $('<div class="loadmask-msg" style="display:none;"></div>');
					maskMsgDiv.append('<div>' + label + '</div>');
					element.append(maskMsgDiv);
					
					//calculate center position
					maskMsgDiv.css("top", Math.round(element.height() / 2 - (maskMsgDiv.height() - parseInt(maskMsgDiv.css("padding-top")) - parseInt(maskMsgDiv.css("padding-bottom"))) / 2)+"px");
					maskMsgDiv.css("left", Math.round(element.width() / 2 - (maskMsgDiv.width() - parseInt(maskMsgDiv.css("padding-left")) - parseInt(maskMsgDiv.css("padding-right"))) / 2)+"px");
					
					maskMsgDiv.show();
			}
		},
		unmaskElement: function(element){
			//if this element has delayed mask scheduled then remove it
			if (element.data("_mask_timeout") !== undefined) {
					clearTimeout(element.data("_mask_timeout"));
					element.removeData("_mask_timeout");
			}
			
			element.find(".loadmask-msg,.loadmask").remove();
			element.removeClass("masked");
			element.removeClass("masked-relative");
			element.find("select").removeClass("masked-hidden");
		}
	});
	*/
	
	//$.fn.RWS = $.extend({
	$.fn.extend({
		// 以下沒有用
		/*
		set: function(options){
			var opts = $.extend(true, defaultOptions, options);
			this.get();
		},
		get: function(){
			RWS_get();
		},
		mask: function(object, label, delay){
			$(object).each(function(){
				if(delay !== undefined && delay > 0){
					var element = $(object);
					element.data("_mask_timeout", setTimeout(function() { $.maskElement(element, label)}, delay));
				}else{
					$.maskElement($(object), label);
				}
			});
		},
		unmask: function(object){
			$(object).each(function(){
				$.unmaskElement($(object));
			});
		},
		isMasked: function(object){
			return object.hasClass("masked");
		},
		*/
		//RWS_init: function(strlang, strfunc, strmethod, strdata) {
		// (定義)語系: lang, 功能: func, 功能內的class: method, 資料:data
		RWS_init: function(options) {
			//$.fn.RWS.mask("body", "Waiting...");
			
			var arrdata = {
				client_version: '0.1',
				lang: options.lang,
				func: options.func,
				method: options.method,
				data: options.data
			};
			
			if (typeof(arrdata.lang) == SystemVar.undefined || typeof(arrdata.func) == SystemVar.undefined || typeof(arrdata.method) == SystemVar.undefined) {
				log('(error)RWS_init: no lang, func, method!');
				return this;
			}
			
			// 儲存至defaultOptions
			defaultOptions._RWS_form = this;
			
			// fast fail if nothing selected (http://dev.jquery.com/ticket/2752)
			if (! this.length) {
				log('(warning)RWS_init: skipping submit process - no element selected');
				if (typeof(arrdata.data) == SystemVar.undefined) {
					log('(error)RWS_init: no data!');
					return this;
				}
			} else {
				// hook for manipulating the form data before it is extracted;
				// convenient for use with rich editors like tinyMCE or FCKEditor
				var veto = {};
				this.trigger('form-pre-serialize', [this, arrdata, veto]);
				if (veto.veto) {
					log('RWS_init: submit vetoed via form-pre-serialize trigger');
					return this;
				}
				
				// 轉換form表資料
				arrdata.data = RWS_formFormat(arrdata.semantic);
			}
			
			// 儲存至defaultOptions
			defaultOptions._RWS_arrdata = arrdata;
			
			// 啟動ajax
			$.when(RWS_get())
			.done( function() {
				// callbacks
				var callbacks = [];
				callbacks.push(options.success);
				callbacks.push(options.error);
				if (Result._RWS_status == 1 && options.success) {
					callbacks[0].apply(this, [Result._RWS_results.JDATA, Result._RWS_results.JINFO, Result._RWS_results.JOPTS]);
				} else if (options.error) {
					callbacks[1].apply(this, [Result._RWS_status, Result._RWS_results]);
				}
			});
		},
		RWS_status: function(){
			return Result._RWS_status;
		},
		RWS_results: function(){
			return Result._RWS_results;
		},
		// expose debug var
		RWS_log: false
	});
})(jQuery);